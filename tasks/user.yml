---

- name: Change root password
  user:
    name: root
    password: "{{ first5user_root_password }}"
  when: first5user_changerootpwd

- name: History configuration for root
  lineinfile:
    dest: "/root/.bashrc"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backup: true
  become: true
  with_items:
    - {regexp: "^export HISTTIMEFORMAT", line: 'export HISTTIMEFORMAT="%d/%m/%y %T "'}
    - {regexp: "^HISTCONTROL=", line: 'HISTCONTROL=ignoreboth:erasedups'}
  tags: [user, ssh_bash]


- name: Add/remove required groups
  group:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
  with_items:
    - "{{ first5user_ansible_groups }}"
    - "{{ first5user_ansible_add_groups | default([]) }}"

- name: Install sudo package | Debian
  apt:
    name: sudo
  when: ansible_os_family == 'Debian'

- name: Install sudo package | RedHat
  yum:
    name: sudo
  when: ansible_os_family == 'RedHat'


- name: common | configure prompt
  lineinfile:
    dest: /etc/bash.bashrc
    regexp: "^PS1="
    line: PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$'
    backup: true
  become: true
  tags: common
  when: ansible_os_family == 'Debian'

- name: common | copy bash config files
  template:
    src: bashrc_skel.j2
    dest: /etc/skel/.bashrc
    backup: true
  tags: common
  when: ansible_os_family == 'Debian'

# TODO: Make idempotent
# Also may best set shell to sh as low resource use and basic for ansible
# temp removed groups as not idempotent and not needed as group

- name: Add ansible user
  user:
    name: "{{ first5user_ansible_username }}"
    password: "{{ first5user_ansible_password }}"
    append: "{{ first5user_append_groups }}"
    group: "{{ first5user_admin_group }}"
    groups: "{{ first5user_ansible_user_groups | join(',') }}"
    shell: "{{ first5user_default_shell }}"
    generate_ssh_key: true
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
    update_password: on_create

# to_do: Create a task that sets up the umask for the ansible user
# allowing a more restrictive umask for the system

- name: Override the default user umask
  set_fact:
    user_umask: "{{ first5user_ansible_user_umask }}"
  when: first5user_ansible_user_umask != default_umask

- name: common | copy bash config files
  template:
    src: "{{ item.src }}"
    dest: "/home/{{ first5user_ansible_username }}/{{ item.dest }}"
    backup: true
    owner: "{{ first5user_ansible_username }}"
    group: "{{ first5user_admin_group }}"
    mode: 0644
  with_items:
    - {src: 'bashrc_skel.j2', dest: '.bashrc'}
    - {src: 'bash_profile.j2', dest: '.bash_profile'}
  tags: common
  when: ansible_os_family == 'Debian'

- name: Set up authorized_keys for the ansible user
  authorized_key:
    user: "{{ first5user_ansible_username }}"
    key: "{{ lookup('file', item.file) }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ first5user_public_ssh_keys }}"
  become: true
  tags: [user, user_ssh_keys]

- name: create users ssh directory
  file:
    path: "/home/{{ item.user }}/.ssh"
    state: directory
    owner: "{{ item.user }}"
    group: "{{ first5user_admin_group }}"
    mode: 0700
    recurse: false
  with_items:
    - "{{ first5deploy_user_keys }}"
    - "{{ first5deploy_user_private_keys }}"
  become: true

- name: Put public keys in place for users
  copy:
    src: "{{ item.src }}"
    dest: "/home/{{ item.user }}/.ssh/{{ item.dest }}"
    mode: "{{ item.mode|default('0600') }}"
    owner: "{{ item.user }}"
    group: "{{ first5user_admin_group }}"
  with_items: "{{ first5deploy_user_keys }}"


# this is for when you have encrypted id_rsa keys in your repo
- name: Put private keys in place for users
  copy:
    src: "{{ item.src }}"
    dest: "/home/{{ item.user }}/.ssh/{{ item.dest }}"
    mode: "{{ item.mode|default('0600') }}"
    owner: "{{ item.user }}"
    group: "{{ first5user_admin_group }}"
  with_items: "{{ first5deploy_user_private_keys }}"


- name: Decrypt the private key
  command: openssl aes-256-cbc -salt -a -d -in /home/{{ item.user }}/.ssh/{{ item.dest }}
           -out /home/{{ item.user }}/.ssh/{{ item.dest }}-decrypted.key -k {{ ssh_key_password }}
           creates=/home/{{ item.user }}/.ssh/{{ item.dest }}-decrypted.key
  with_items: "{{ first5deploy_user_private_keys }}"

- name: Rename the decrypted private key
  command: mv /home/{{ item.user }}/.ssh/{{ item.dest }}-decrypted.key /home/{{ item.user }}/.ssh/{{ item.dest }}
           removes=/home/{{ item.user }}/.ssh/{{ item.dest }}-decrypted.key
  with_items: "{{ first5deploy_user_private_keys }}"

- name: Restore permissions on key files
  file:
    path: "/home/{{ item.user }}/.ssh/{{ item.dest }}"
    owner: "{{ item.user }}"
    group: "{{ first5user_admin_group }}"
    mode: "{{ item.mode|default('0600') }}"
  changed_when: false
  with_items: "{{ first5deploy_user_private_keys }}"
  become: true

- name: Setup vagrant user for ssh if local
  user:
    name: vagrant
    shell: /bin/bash
    group: "{{ first5user_admin_group }}"
    append: true
  when: inventory_hostname in groups['local']

# might be better to create these in a sudoers.d folder
# and uncomment the incude
- name: Add Ansible user to the passwordless sudoers.
  lineinfile:
    dest: /etc/sudoers
    regexp: "^{{ first5user_ansible_username }}"
    line: "{{ first5user_ansible_username }} ALL=(ALL) falsePASSWD: ALL"
    state: present
    validate: 'visudo -cf %s'

- name: Add Ansible user to the sudoers not requiring tty.
  lineinfile:
    dest: /etc/sudoers
    regexp: "^Defaults:{{ first5user_ansible_username }}"
    line: "Defaults:{{ first5user_ansible_username }}  !requiretty"
    state: present
    validate: 'visudo -cf %s'
